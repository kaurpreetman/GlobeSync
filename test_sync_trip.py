"""
Test syncing a trip to calendar directly
"""
import pickle
import os
from datetime import datetime, timedelta
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

def sync_test_trip():
    user_id = "117978642858986784707"
    token_path = f"tokens/user_{user_id}_token.pickle"
    
    # Load credentials
    with open(token_path, 'rb') as token:
        creds = pickle.load(token)
    
    service = build('calendar', 'v3', credentials=creds)
    
    # Create test trip events
    start_date = datetime.now() + timedelta(days=7)
    
    events_to_create = [
        {
            'summary': '🌍 Trip: Delhi to Hyderabad',
            'location': 'Delhi - Hyderabad',
            'description': 'Test trip from Delhi to Hyderabad\nDuration: 5 days\nGenerated by GlobeSync',
            'start': {
                'date': start_date.strftime('%Y-%m-%d'),
                'timeZone': 'UTC',
            },
            'end': {
                'date': (start_date + timedelta(days=1)).strftime('%Y-%m-%d'),
                'timeZone': 'UTC',
            },
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'email', 'minutes': 24 * 60 * 3},
                    {'method': 'popup', 'minutes': 24 * 60},
                ],
            },
        },
        {
            'summary': '✈️ Departure: Delhi to Hyderabad',
            'location': 'Delhi Airport',
            'description': 'Departure from Delhi to Hyderabad',
            'start': {
                'dateTime': start_date.strftime('%Y-%m-%dT08:00:00'),
                'timeZone': 'UTC',
            },
            'end': {
                'dateTime': start_date.strftime('%Y-%m-%dT10:00:00'),
                'timeZone': 'UTC',
            },
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 120},
                    {'method': 'popup', 'minutes': 30},
                ],
            },
        },
        {
            'summary': '🎯 Pack for trip to Hyderabad',
            'description': f'Reminder to pack for your trip to Hyderabad\nTrip starts: {start_date.strftime("%B %d, %Y")}',
            'start': {
                'dateTime': (start_date - timedelta(days=2)).strftime('%Y-%m-%dT18:00:00'),
                'timeZone': 'UTC',
            },
            'end': {
                'dateTime': (start_date - timedelta(days=2)).strftime('%Y-%m-%dT19:00:00'),
                'timeZone': 'UTC',
            },
            'reminders': {
                'useDefault': False,
                'overrides': [
                    {'method': 'popup', 'minutes': 0},
                ],
            },
        },
    ]
    
    print(f"\n🎯 Creating {len(events_to_create)} trip events...")
    print(f"📅 Start date: {start_date.strftime('%B %d, %Y')}")
    
    created_events = []
    
    for i, event in enumerate(events_to_create, 1):
        try:
            created_event = service.events().insert(calendarId='primary', body=event).execute()
            created_events.append(created_event)
            print(f"\n✅ Event {i}/{len(events_to_create)}: {event['summary']}")
            print(f"   ID: {created_event['id']}")
            print(f"   Link: {created_event.get('htmlLink')}")
        except Exception as e:
            print(f"\n❌ Failed to create event {i}: {e}")
    
    print(f"\n\n🎉 SUCCESS! Created {len(created_events)} events in your calendar!")
    print(f"\n📱 Check your Google Calendar app:")
    print(f"   Calendar: kumarvatsal34@gmail.com")
    print(f"   Date: {start_date.strftime('%B %d, %Y')} (next week)")
    print(f"   Look for: 🌍 Trip: Delhi to Hyderabad")
    
    # Ask to delete
    response = input("\n\nDelete these test events? (y/n): ")
    if response.lower() == 'y':
        for event in created_events:
            service.events().delete(calendarId='primary', eventId=event['id']).execute()
        print(f"✅ Deleted {len(created_events)} test events")

if __name__ == "__main__":
    sync_test_trip()
